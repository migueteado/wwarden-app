// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
  ADJUSTMENT
}

enum Currency {
  USD
  COP
  EUR
  GBP
  VES
}

model Category {
  id                                String                              @id @default(cuid())
  type                              TransactionType
  name                              String                              @unique
  subcategories                     Subcategory[]
  transactions                      Transaction[]
  budgets                           Budget[]
}

model Subcategory {
  id                                String                              @id @default(cuid())
  categoryId                        String
  category                          Category                         @relation(fields: [categoryId], references: [id])
  name                              String                              
  transactions                      Transaction[]
  budgets                           Budget[]

  @@unique([categoryId, name])
}

model User {
  id                                String                              @id @default(cuid())
  username                          String                              @unique
  email                             String                              @unique
  password                          String
  wallets                           Wallet[]
  budgets                           Budget[]
  households                        HouseholdMember[]
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
}

model Wallet {
  id                                String                              @id @default(cuid())
  platform                          String
  name                              String                              
  userId                            String
  user                              User                                @relation(fields: [userId], references: [id])
  currency                          Currency
  balance                           Decimal                             @db.Decimal(10, 2)
  transactions                      Transaction[]
  householdWallets                  HouseholdWallet[]
  pockets                           Pocket[]

  @@unique([name, userId])
}

model Transaction {
  id                                String                              @id @default(cuid())
  walletId                          String
  wallet                            Wallet                              @relation(fields: [walletId], references: [id], onDelete: Cascade)
  categoryId                        String
  category                          Category                            @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  subcategoryId                     String
  subcategory                       Subcategory                         @relation(fields: [subcategoryId], references: [id], onDelete: Restrict)
  type                              TransactionType
  amount                            Decimal                             @db.Decimal(10, 2)
  amountUSD                         Decimal                             @db.Decimal(10, 2)
  entity                            String?
  description                       String?
  date                              DateTime                            @db.Date
  transferId                        String?
  transfer                          Transfer?                           @relation(fields: [transferId], references: [id], onDelete: Cascade)
  pocketTransaction                 PocketTransaction?
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
}

model Transfer {
  id                                String                              @id @default(cuid())
  transactions                      Transaction[]         
  fee                               Decimal                             @db.Decimal(10, 2)
  feeUSD                            Decimal                             @db.Decimal(10, 2)
  date                              DateTime                            @db.Date
}

model Household {
  id                                String                              @id @default(cuid())
  name                              String
  members                           HouseholdMember[]
  wallets                           HouseholdWallet[]
  budgets                           Budget[]
}

enum HouseholdMemberType {
  OWNER
  MEMBER
  GUEST
}

model HouseholdMember {
  id                                String                              @id @default(cuid())
  householdId                       String
  household                         Household                           @relation(fields: [householdId], references: [id], onDelete: Cascade)
  userId                            String
  user                              User                                @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                              HouseholdMemberType

  @@unique([householdId, userId])
}

model HouseholdWallet {
  id                                String                              @id @default(cuid())
  householdId                       String
  household                         Household                           @relation(fields: [householdId], references: [id], onDelete: Cascade)
  walletId                          String
  wallet                            Wallet                              @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([householdId, walletId])
}

model ExchangeRate {
  id                                String                              @id @default(cuid())
  data                              Json
  createdAt                         DateTime                            @default(now())
}

model Pocket {
  id                                String                              @id @default(cuid())
  name                              String
  walletId                          String
  wallet                            Wallet                              @relation(fields: [walletId], references: [id], onDelete: Cascade)
  balance                           Decimal                             @db.Decimal(10, 2)
  transactions                      PocketTransaction[]

  @@unique([name, walletId])
}


model PocketTransaction {
  id                                String                              @id @default(cuid())
  pocketId                          String
  pocket                            Pocket                              @relation(fields: [pocketId], references: [id], onDelete: Cascade)
  amount                            Decimal                             @db.Decimal(10, 2)
  amountUSD                         Decimal                             @db.Decimal(10, 2)
  date                              DateTime                            @db.Date
  description                       String?
  transactionId                     String?                             @unique
  transaction                       Transaction?                        @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Budget {
  id                                String                              @id @default(cuid())
  userId                            String?
  user                              User?                               @relation(fields: [userId], references: [id], onDelete: Cascade)
  householdId                       String?
  household                         Household?                          @relation(fields: [householdId], references: [id], onDelete: Cascade)
  categoryId                        String
  category                          Category                            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategoryId                     String?
  subcategory                       Subcategory?                        @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  amount                            Decimal                             @db.Decimal(10, 2)
  amountUSD                         Decimal                             @db.Decimal(10, 2)
  period                            String
  startDate                         DateTime
  endDate                           DateTime                            @db.Date
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime                            @updatedAt
}